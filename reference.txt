LangChain 是一個用於構建基於大型語言模型 (LLM) 應用的框架，目的是幫助開發者更有效地整合外部資料與工具，使模型能在特定領域具備更強的推理與互動能力。

LangChain 的六大核心模組包括：

1. LLMs：語言模型的包裝，例如 OpenAI GPT、Anthropic Claude、Meta Llama、Ollama 等。
2. Prompt Templates：用來設計提示詞模板，讓使用者能以更結構化的方式與模型互動。
3. Chains：將多個步驟組合成流程，例如問答系統、摘要、翻譯等任務。
4. Agents：具備決策能力的模組，可以根據任務選擇使用哪些工具。
5. Memory：讓模型保留對話歷史，提高多輪對話的自然性與上下文理解。
6. Tools：可擴充的外部工具，如計算機、搜尋引擎、資料庫查詢等，讓模型能夠動態呼叫並回傳結果。

LangChain 常見應用場景如下：

- 建立智慧客服：使用 RAG 技術搭配企業文件資料庫，讓客戶提問時能查找正確答案。
- 語音助理與聊天機器人：透過 Agent + Tool 的結合，提高模型在不同語境下的反應能力。
- 文件問答系統：支援從 PDF、TXT、網頁等文件中提問，並返回相關摘要或回答。
- 複雜任務代理人：結合多個工具（如網路搜尋、計算器、資料庫）處理多步驟問題。

LangChain 也支援多種向量資料庫（Vector Store），像是 FAISS、Chroma、Weaviate 等，可將嵌入後的文件向量儲存並進行高效檢索。

若使用者想要建構 RAG 系統，流程大致如下：
1. 準備文件並切割成多個段落。
2. 使用 Embedding 模型轉換為向量。
3. 建立或載入向量資料庫。
4. 接收提問，根據語意找到最相關的段落。
5. 將段落內容與提問組合後丟給 LLM 回答。

LangChain 鼓勵模組化開發，使開發者可以彈性選用不同的語言模型、資料庫或工具套件來建構自己的 AI 應用。
